{"version":3,"file":"metadatagenerator-main.js","mappings":"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","sources":["webpack:///metadatagenerator/src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    const fieldsContainer = document.getElementById('keyvalue-fields');\n    const output = document.getElementById('output');\n    const folderModal = document.getElementById('folder-browser-modal');\n    const folderContainer = document.getElementById('folder-container');\n    const currentFolderPath = document.getElementById('current-folder-path');\n    const saveToNextcloudButton = document.getElementById('save-to-nextcloud');\n    const closeModalButton = document.getElementById('close-modal');\n    const browseFolderButton = document.getElementById('browse-folder');\n    const saveLocalButton = document.getElementById('save');\n    const backButton = document.getElementById('back-button'); // Add the back button\n    const fileContentContainer = document.getElementById('file-content'); // Area to display file content\n    const fileViewer = document.getElementById('file-viewer'); // Add this to display file content\n\n    let selectedFolder = '/';\n    let selectedFile = null; // Variable to store the selected file\n    let folderHistory = [];  // History of visited folders\n\n    // Add key-value fields dynamically\n    function addField() {\n        const fieldDiv = document.createElement('div');\n        fieldDiv.className = 'field';\n\n        const keyInput = document.createElement('input');\n        keyInput.placeholder = 'Key';\n        keyInput.className = 'key';\n\n        const valueInput = document.createElement('input');\n        valueInput.placeholder = 'Value';\n        valueInput.className = 'value';\n\n        fieldDiv.appendChild(keyInput);\n        fieldDiv.appendChild(valueInput);\n\n        fieldsContainer.appendChild(fieldDiv);\n    }\n\n    // Generate XML content from key-value fields\n    function generateXML() {\n        const fields = document.querySelectorAll('.field');\n        let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<resource>';\n\n        fields.forEach(field => {\n            const key = field.querySelector('.key').value.trim();\n            const value = field.querySelector('.value').value.trim();\n            if (key && value) {\n                xml += `\\n\\t<${key}>${value}</${key}>`;\n            }\n        });\n\n        xml += '\\n</resource>';\n        output.textContent = xml;\n    }\n\n    // Save XML content locally\n    function saveAsXML() {\n        const xmlContent = output.textContent;\n\n        if (!xmlContent.trim()) {\n            alert('No XML content to save.');\n            return;\n        }\n\n        const blob = new Blob([xmlContent], { type: 'application/xml' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = 'metadata.xml';\n        link.click();\n    }\n\n    // Load folder structure for browsing (Including files content)\n    async function loadFolderStructure(path = '/') {\n        try {\n            folderContainer.innerHTML = '<p>Loading...</p>'; // Show a loading message\n\n            // Sanitize the path to ensure no redundancy (remove '/admin/files/' if it already exists)\n            if (path.startsWith('/admin/files/')) {\n                path = path.substring('/admin/files/'.length); // Remove '/admin/files/' from the start of the path\n            }\n\n            const response = await fetch(`/index.php/apps/metadatagenerator/api/folder-structure?path=${encodeURIComponent(path)}`);\n\n            // Check if the response is JSON\n            const contentType = response.headers.get('content-type');\n            if (!contentType || !contentType.includes('application/json')) {\n                const errorText = await response.text(); // Get the actual error content\n                console.error('Server returned non-JSON response:', errorText);\n                throw new Error('Invalid response from server: Expected JSON');\n            }\n\n            const data = await response.json();\n\n            if (data.error) {\n                throw new Error(data.error);\n            }\n\n            folderContainer.innerHTML = ''; // Clear previous content\n\n            // Handle folders\n            if (data.folders && data.folders.length > 0) {\n                data.folders.forEach(folder => {\n                    const folderDiv = document.createElement('div');\n                    folderDiv.className = 'folder-item';\n                    folderDiv.textContent = folder.name;\n                    folderDiv.dataset.path = folder.path;\n                    folderDiv.addEventListener('click', () => {\n                        selectedFolder = folder.path;\n                        folderHistory.push(path);  // Push current path to history before navigating\n                        currentFolderPath.textContent = `Current Folder: ${selectedFolder}`;\n                        loadFolderStructure(folder.path); // Navigate into the folder\n                    });\n                    folderContainer.appendChild(folderDiv);\n                });\n            } else {\n                folderContainer.innerHTML = '<p>No folders available.</p>';\n            }\n\n            // Handle files\n            if (data.files && data.files.length > 0) {\n                data.files.forEach(file => {\n                    const fileDiv = document.createElement('div');\n                    fileDiv.className = 'file-item';\n                    fileDiv.textContent = file.name;\n                    fileDiv.dataset.path = file.path;\n                    fileDiv.addEventListener('click', () => {\n                        selectedFile = file.path; // Store the selected file\n                        displayFileContent(file.path); // Display file content\n                    });\n                    folderContainer.appendChild(fileDiv);\n                });\n            } else {\n                folderContainer.innerHTML += '<p>No files available in this folder.</p>';\n            }\n        } catch (error) {\n            console.error('Error loading folders:', error);\n            folderContainer.innerHTML = `<p>Error: ${error.message}</p>`;\n        }\n    }\n\n    // Display the content of a selected file\n    async function displayFileContent(filePath) {\n        try {\n            const response = await fetch(`/index.php/apps/metadatagenerator/api/file-content?path=${encodeURIComponent(filePath)}`);\n\n            // Check if the response is JSON\n            const contentType = response.headers.get('content-type');\n            if (!contentType || !contentType.includes('application/json')) {\n                const errorText = await response.text();\n                console.error('Server returned non-JSON response:', errorText);\n                throw new Error('Invalid response from server: Expected JSON');\n            }\n\n            const data = await response.json();\n\n            if (data.error) {\n                throw new Error(data.error);\n            }\n\n            // Display the file content in the designated container\n            fileContentContainer.innerHTML = `<h3>File Content:</h3><pre>${data.content}</pre>`;\n        } catch (error) {\n            console.error('Error displaying file content:', error);\n            fileContentContainer.innerHTML = `<p>Error: ${error.message}</p>`;\n        }\n    }\n\n    backButton.addEventListener('click', () => {\n        if (folderHistory.length > 0) {\n            let previousPath = folderHistory.pop();  // Get last folder in history\n    \n            // ✅ Ensure \"/admin/files/\" prefix is always included\n            if (!previousPath.startsWith('/admin/files/')) {\n                previousPath = '/admin/files/' + previousPath;\n            }\n    \n            loadFolderStructure(previousPath);  // Navigate back\n    \n            // ✅ Ensure \"Current Folder\" path updates correctly\n            selectedFolder = previousPath;\n            currentFolderPath.textContent = `Current Folder: ${selectedFolder}`;\n        } else {\n            alert('You are already at the root folder.');\n        }\n    });\n\n    // Open the folder browser modal\n    function openFolderBrowser() {\n        folderModal.style.display = 'block';\n        loadFolderStructure('/'); // Load root folder\n    }\n\n    // Close the folder browser modal\n    function closeFolderBrowser() {\n        folderModal.style.display = 'none';\n    }\n\n    // Save XML content to selected Nextcloud folder\n    async function saveToNextcloud() {\n        const xmlContent = output.textContent;\n\n        if (!xmlContent.trim()) {\n            alert('No XML content to save.');\n            return;\n        }\n\n        if (!selectedFolder) {\n            alert('No folder selected.');\n            return;\n        }\n\n        // ✅ Prompt user for filename (default: \"metadata.xml\")\n        let fileName = prompt(\"Enter a file name:\", \"metadata.xml\");\n        if (!fileName) return; // If user cancels, do nothing\n\n        // Ensure .xml extension\n        if (!fileName.endsWith('.xml')) {\n            fileName += '.xml';\n        }\n\n        try {\n            let sanitizedPath = selectedFolder.replace(/^\\/admin\\/files\\//, ''); // Remove '/admin/files/' if present\n            if (!sanitizedPath) {\n                alert('No folder selected.');\n                return;\n            }\n    \n            const response = await fetch('/index.php/apps/metadatagenerator/api/save', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'OCS-APIREQUEST': 'true',\n                },\n                body: JSON.stringify({\n                    folder: sanitizedPath,\n                    fileName: fileName,  // ✅ Send custom filename\n                    content: xmlContent,\n                }),\n            });\n    \n            const result = await response.json();\n            if (result.message) {\n                alert(result.message);\n                closeFolderBrowser();\n            } else {\n                alert(result.error || 'Error saving file.');\n            }\n        } catch (error) {\n            console.error('Error saving file:', error);\n            alert('Error saving file.');\n        }\n    }\n\n    // Event listeners\n    document.getElementById('add-field').addEventListener('click', addField);\n    document.getElementById('generate').addEventListener('click', generateXML);\n    saveLocalButton.addEventListener('click', saveAsXML);\n    browseFolderButton.addEventListener('click', openFolderBrowser);\n    closeModalButton.addEventListener('click', closeFolderBrowser);\n    saveToNextcloudButton.addEventListener('click', saveToNextcloud);\n});\n"],"names":["document","addEventListener","fieldsContainer","getElementById","output","folderModal","folderContainer","currentFolderPath","saveToNextcloudButton","closeModalButton","browseFolderButton","saveLocalButton","backButton","fileContentContainer","selectedFolder","selectedFile","folderHistory","async","loadFolderStructure","path","innerHTML","startsWith","substring","response","fetch","encodeURIComponent","contentType","headers","get","includes","errorText","text","console","error","Error","data","json","folders","length","forEach","folder","folderDiv","createElement","className","textContent","name","dataset","push","appendChild","files","file","fileDiv","filePath","content","message","displayFileContent","closeFolderBrowser","style","display","previousPath","pop","alert","fieldDiv","keyInput","placeholder","valueInput","fields","querySelectorAll","xml","field","key","querySelector","value","trim","xmlContent","blob","Blob","type","link","href","URL","createObjectURL","download","click","fileName","prompt","endsWith","sanitizedPath","replace","method","body","JSON","stringify","result"],"sourceRoot":""}